db.question.insert(
    [{
        "_id": 111,
        "category": "OOP",
        "level": "JUNIOR",
        "smallDescription": "Назовите принципы ООП и расскажите о каждом",
        "largeDescription": "Объе́ктно-ориенти́рованное программи́рование (ООП) — это методология программирования, основанная на представлении программы в виде совокупности объектов, каждый из которых является экземпляром определенного класса, а классы образуют иерархию наследования.Основные принципы ООП: абстракция, инкапсуляция, наследование, полиморфизм.Абстракция –  означает выделение значимой информации и исключение из рассмотрения незначимой. С точки зрения программирования это правильное разделение программы на объекты. Абстракция позволяет отобрать главные характеристики и опустить второстепенные.Пример: описание должностей в компании. Здесь название должности значимая информация, а описание обязанностей у каждой должности это второстепенная информация. К примеру главной характеристикой для “директор” будет то, что это должность чем-то управляет, а чем именно (директор по персоналу, финансовый директор, исполнительный директор) это уже второстепенная информация.Инкапсуляция – свойство системы, позволяющее объединить данные и методы, работающие с ними, в классе. Для Java корректно будет говорить, что инкапсуляция это “сокрытие реализации”. Пример из жизни – пульт от телевизора. Мы нажимаем кнопочку “увеличить громкость” и она увеличивается, но в этот момент происходят десятки процессов, которые скрыты от нас. Для Java: можно создать класс с 10 методами, например вычисляющие площадь сложной фигуры, но сделать из них 9 private. 10й метод будет называться “вычислитьПлощадь()” и объявлен public, а в нем уже будут вызываться необходимые скрытые от пользователя методы. Именно его и будет вызывать пользователь.Наследование – свойство системы, позволяющее описать новый класс на основе уже существующего с частично или полностью заимствующейся функциональностью. Класс, от которого производится наследование, называется базовым, родительским или суперклассом. Новый класс — потомком, наследником, дочерним или производным классом.Полиморфизм – свойство системы использовать объекты с одинаковым интерфейсом без информации о типе и внутренней структуре объекта",
        "_class": "org.neustupov.javadevinterviewbot.model.Question"
    },{
        "_id": 112,
        "category": "OOP",
        "level": "JUNIOR",
        "smallDescription": "Дайте определение понятию “класс”",
        "largeDescription": "Класс – это описатель общих свойств группы объектов. Этими свойствами могут быть как характеристики объектов (размер, вес, цвет и т.п.), так и поведения, роли и т.п",
        "_class": "org.neustupov.javadevinterviewbot.model.Question"
    },{
        "_id": 113,
        "category": "OOP",
        "level": "JUNIOR",
        "smallDescription": "Что такое поле/атрибут класса?",
        "largeDescription": "Поле (атрибут) класса – это характеристика объекта. Например для фигуры это может быть название, площадь, периметр.",
        "_class": "org.neustupov.javadevinterviewbot.model.Question"
    },{
        "_id": 114,
        "category": "COLLECTIONS",
        "level": "JUNIOR",
        "smallDescription": "Дайте определение понятию “коллекция”",
        "largeDescription": "Коллекциями/контейнерами в Java принято называть классы, основная цель которых – хранить набор других элементов.",
        "_class": "org.neustupov.javadevinterviewbot.model.Question"
    },{
        "_id": 115,
        "category": "COLLECTIONS",
        "level": "JUNIOR",
        "smallDescription": "Назовите преимущества использования коллекций.",
        "largeDescription": "Массивы обладают значительными недостатками. Одним из них является конечный размер массива, как следствие, необходимость следить за размером массива. Другим — индексная адресация, что не всегда удобно, т.к. ограничивает возможности добавления и удаления объектов. Чтобы избавиться от этих недостатков уже несколько десятилетий программисты используют рекурсивные типы данных, такие как списки и деревья. Стандартный набор коллекций Java служит для избавления программиста от необходимости самостоятельно реализовывать эти типы данных и снабжает его дополнительными возможностями.",
        "_class": "org.neustupov.javadevinterviewbot.model.Question"
    },{
        "_id": 116,
        "category": "COLLECTIONS",
        "level": "JUNIOR",
        "smallDescription": "Какие данные могут хранить коллекции?",
        "largeDescription": "Коллекции могут хранить любые ссылочные типы данных.",
        "_class": "org.neustupov.javadevinterviewbot.model.Question"
    },{
        "_id": 117,
        "category": "COLLECTIONS",
        "level": "JUNIOR",
        "smallDescription": "Какова иерархия коллекций?",
        "largeDescription": "Здесь следует обратить внимание, что interface Map не входит в иерархию interface Collection.С Java 1.6 классы TreeSet и TreeMap имплементируют интерфейсы NavigableSet и NavigableMap, которые расширяют интерфейсы SortedSet и SortedMap соответственно (SortedSet и SortedMap расширяют Set и Map).",
        "_class": "org.neustupov.javadevinterviewbot.model.Question"
    },{
        "_id": 118,
        "category": "PATTERNS",
        "level": "JUNIOR",
        "smallDescription": "Одиночка",
        "largeDescription": "Это порождающий паттерн проектирования, который гарантирует, что у класса есть только один экземпляр, и предоставляет к нему глобальную точку доступа.Гарантирует наличие единственного экземпляра класса. Чаще всего это полезно для доступа к какому-то общему ресурсу, например, базе данных.Представьте, что вы создали объект, а через некоторое время пробуете создать ещё один. В этом случае хотелось бы получить старый объект, вместо создания нового.Такое поведение невозможно реализовать с помощью обычного конструктора, так как конструктор класса всегда возвращает новый объект.Предоставляет глобальную точку доступа. Это не просто глобальная переменная, через которую можно достучаться к определённому объекту. Глобальные переменные не защищены от записи, поэтому любой код может подменять их значения без вашего ведома.Но есть и другой нюанс. Неплохо бы хранить в одном месте и код, который решает проблему №1, а также иметь к нему простой и доступный интерфейс.Интересно, что в наше время паттерн стал настолько известен, что теперь люди называют «одиночками» даже те классы, которые решают лишь одну из проблем, перечисленных выше.",
        "_class": "org.neustupov.javadevinterviewbot.model.Question"
    },{
        "_id": 119,
        "category": "PATTERNS",
        "level": "JUNIOR",
        "smallDescription": "Компоновщик",
        "largeDescription": "Это структурный паттерн проектирования, который позволяет сгруппировать множество объектов в древовидную структуру, а затем работать с ней так, как будто это единичный объект.",
        "_class": "org.neustupov.javadevinterviewbot.model.Question"
    },{
        "_id": 120,
        "category": "PATTERNS",
        "level": "JUNIOR",
        "smallDescription": "Заместитель",
        "largeDescription": "ЭЗаместитель — это объект, который выступает прослойкой между клиентом и реальным сервисным объектом. Заместитель получает вызовы от клиента, выполняет свою функцию (контроль доступа, кеширование, изменение запроса и прочее), а затем передаёт вызов сервисному объекту.",
        "_class": "org.neustupov.javadevinterviewbot.model.Question"
    },{
        "_id": 121,
        "category": "PATTERNS",
        "level": "JUNIOR",
        "smallDescription": "Приспособленец",
        "largeDescription": "Это структурный паттерн проектирования, который позволяет вместить бóльшее количество объектов в отведённую оперативную память. Приспособленец экономит память, разделяя общее состояние объектов между собой, вместо хранения одинаковых данных в каждом объекте..",
        "_class": "org.neustupov.javadevinterviewbot.model.Question"
    },{
        "_id": 122,
        "category": "OOP",
        "level": "JUNIOR",
        "smallDescription": "Что такое наследование?",
        "largeDescription": "Наследование это процесс благодаря которому один объект может приобрести свойства другого объекта (наследование всех свойств одного объекта другим). И добавлять черты характерные только для него самого.",
        "_class": "org.neustupov.javadevinterviewbot.model.Question"
    },{
        "_id": 123,
        "category": "OOP",
        "level": "JUNIOR",
        "smallDescription": "Что такое полиморфизм? Какие проявления полиморфизма в Java Вы знаете?",
        "largeDescription": "Полиморфизм (polymorphism) (от греческого polymorphos) - это свойство, которое позволяет одно и то же имя использовать для решения двух или более схожих, но технически разных задач. Целью полиморфизма, применительно к объектно-ориентированному программированию, является использование одного имени для задания общих для класса действий. Выполнение каждого конкретного действия будет определяться типом данных. В более общем смысле, концепцией полиморфизма является идея \"один интерфейс, множество методов\". Это означает, что можно создать общий интерфейс для группы близких по смыслу действий.",
        "_class": "org.neustupov.javadevinterviewbot.model.Question"
    },{
        "_id": 124,
        "category": "OOP",
        "level": "JUNIOR",
        "smallDescription": "Что такое инкапсуляция?",
        "largeDescription": "Инкапсуляция (encapsulation) - это сокрытие реализации класса и отделение его внутреннего представления от внешнего (интерфейса), это свойство которое позволяет  закрыть доступ к полям и методам  класса другим классам, а предоставлять  им доступ только через интерфейс(метод). При использовании объектно-ориентированного подхода не принято применять прямой доступ к свойствам какого-либо класса из методов других классов. Для доступа к свойствам класса принято задействовать специальные методы этого класса для получения и изменения его свойств. ",
        "_class": "org.neustupov.javadevinterviewbot.model.Question"
    },{
        "_id": 125,
        "category": "OOP",
        "level": "JUNIOR",
        "smallDescription": "Что такое aбстракция?",
        "largeDescription": " Абстракция - это выделение общих характеристик объекта,исключая набор незначительных. С помощью принципа абстракции данных, данные преобразуются в объекты. Данные обрабатываются в виде цепочки сообщений между отдельными объектами. Все объекты проявляют свои уникальные признаки поведения. Огромный плюс абстракции в том, что она отделяет реализацию объектов от их деталей, что в свою очередь позволяет управлять функциями высокого уровня через функции низкого уровня. ",
        "_class": "org.neustupov.javadevinterviewbot.model.Question"
    }]
);